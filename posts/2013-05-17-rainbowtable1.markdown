---
title: Rainbow Table (1)
tags: hash, crypto
---

當初到底是哪篇文章誤導我，說rainbow table就只是個大table的！
根本完全不是！是設計得很巧妙的資料結構。

要從頭說起。

假設我們有一個受到歡迎的大網站，有很多很多的使用者，當然我們就會有很多組帳號和密碼必須存在資料庫裡，密碼我們不想要直接用明文的形式存在資料庫裡，因為這樣很不安全，我們會用一個hash funtion $H$，例如說$sha1$，然後存在資料庫的密碼會是經過$sha1$的結果。

例如說，小明的密碼是$3345678$，那我們就會先算出這個密碼的hash值，

> $sha1(3345678)=173c3b0c8818f98fd4f158804593d24031d8a278$

然後把這個hash值存到資料庫裡。

現在！有一個壞人進入了資料庫，他看到了一大堆$sha1$的結果，他想要反推出每個人的密碼，他該怎麼做呢？

首先壞人知道了密碼長度是12位，可以用英文大小寫＋數字組成。

第一種方法：暴力法

一個一個算可能密碼的hash值，比對出密碼的原文，密碼的可能有這麼多種：

> $62^{12} \simeq 2^{72}$

假如資料庫裡面有一百萬筆資料，就要重複算這麼多種可能一百萬次！

第二種方法：查表法

第一個方法沒存任何的資料，就是不停的計算，實在很累。第二種方法打算造出一個反查表，以後每次要查hash值的明文，就去查這個表，然後一彈指的功夫！就找出原文的密碼了。但重點是，這個表需要多大的空間存？

> $2^{72} \times 20 \times 12 \simeq 2^{80} $

這麼多的byte，換算成gigabyte，大約是$2^{50}$ gigabyte。

這兩種方法在攻擊上都不實用，第一種方法沒用到空間，但需要很久的時間。第二種方法表建好了之後，就可以秒殺所有反查的要求，但是用到太多空間而不切實際。

所以！有人發明了rainbow table，它就是這兩種方法的折衷，也就是是空間-時間的折衷(time-space tradeoff)， 需求的空間、時間都在我們的忍受範圍內，因此成為目前最熱門的破解工具。


