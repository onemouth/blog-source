---
title: Wheel factorization
tags: haskell, python, algorithms
---

sieve algorithm 已經設計的差不多了，接下來可以改進的地方，是嘗試減少我們需要篩的數！

首先我們都知道偶數一定是 2 的倍數，所以可以跳過，因此我們只需要找 $3,5,7,9...$ 這樣一系列的數，再更進一步的話，我們也去掉 3 的倍數，那就只剩下 $5,7,11,13,17,19,23,25...$ 了。

那假如是要去掉 2,3,5 的倍數呢，我們需要檢查的數列會長什麼樣子？這就是[Wheel factorization](http://en.wikipedia.org/wiki/Wheel_factorization)要處理的問題。

先看 2,3 的情形：

* 1, ~~2~~, ~~3~~, ~~4~~, 5, ~~6~~,
* 7, ~~8~~, ~~9~~, ~~10~~, 11, ~~12~~,
* 13, ~~14~~, ~~15~~, ~~16~~, 17, ~~18~~,...  

可以看出數字以六個為一組，從 5 開始，輪流加2然後加4，便是我們要處理的數列。

假如是 2, 3, 5的話，我們也可以用上面的方法找出規則，數字以三十個為一組，劃掉是 2 倍數或 3 倍數或 5 倍數的數，就可以看出這數列的規律。

<script src="https://gist.github.com/onemouth/6405402.js"></script>

<script src="https://gist.github.com/onemouth/6405584.js"></script>
